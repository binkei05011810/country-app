{"ast":null,"code":"// Put effect similar to dispatch in thunk => trigger another action to send data to reducer\n// Effects like takeEvery, takeLatest: define when to run the saga (which action type will trigger the saga)\n// Saga have to be triggered. thunk can be called straight away\nfunction* getCountry() {\n  yield takeEvery(GET_COUNTRY_SAGA, function* (action) {\n    const name = action.payload;\n    const url = `https://restcountries.eu/rest/v2/${name ? `name/${name}?fullText=true` : \"all\"}`; //@ts-ignore\n\n    const response = yield fetch(url); //@ts-ignore\n\n    const data = yield response.json();\n    yield put(getCountrySuccess(data));\n  });\n} // Put effect similar to dispatch in thunk => trigger another action to send data to reducer\n\n\nimport { takeEvery, put, select } from 'redux-saga/effects';\nimport { getCountrySuccess, GET_COUNTRY_SAGA, reactCountrySuccess, LIKE_COUNTRY_SAGA } from '../actions';\n\nconst getFavCountries = store => store.countryReducer.favCountries; // Effects like takeEvery, takeLatest: define when to run the saga (which action type will trigger the saga)\n// Saga have to be triggered. thunk can be called straight away\n\n\nfunction* likeSaga() {\n  yield takeEvery(LIKE_COUNTRY_SAGA, function* (action) {\n    //@ts-ignore\n    const favCountries = yield select(getFavCountries);\n    const country = action.payload;\n    const newFav = [...favCountries, country];\n    localStorage.setItem(\"favCountries\", JSON.stringify(newFav)); //@ts-ignore\n\n    yield put(reactCountrySuccess(newFav));\n  });\n}\n\nexport default getCountry;\nexport default getCountry;","map":{"version":3,"sources":["/Users/meocuabinh/Documents/Integrify/fs7-finland-react-redux-typescript/src/redux/saga/sagas.ts"],"names":["getCountry","takeEvery","GET_COUNTRY_SAGA","action","name","payload","url","response","fetch","data","json","put","getCountrySuccess","select","reactCountrySuccess","LIKE_COUNTRY_SAGA","getFavCountries","store","countryReducer","favCountries","likeSaga","country","newFav","localStorage","setItem","JSON","stringify"],"mappings":"AAAA;AAKA;AACA;AACA,UAAUA,UAAV,GAAuB;AACnB,QAAMC,SAAS,CAACC,gBAAD,EAAmB,WAAWC,MAAX,EAAsD;AACpF,UAAMC,IAAI,GAAGD,MAAM,CAACE,OAApB;AACA,UAAMC,GAAG,GAAI,oCAAmCF,IAAI,GAAI,QAAOA,IAAK,gBAAhB,GAAkC,KAAM,EAA5F,CAFoF,CAIpF;;AACA,UAAMG,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAD,CAA5B,CALoF,CAMpF;;AACA,UAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AACA,UAAMC,GAAG,CAACC,iBAAiB,CAACH,IAAD,CAAlB,CAAT;AACH,GATc,CAAf;AAUH,C,CAED;;;AACA,SAASR,SAAT,EAAoBU,GAApB,EAAyBE,MAAzB,QAAuC,oBAAvC;AAEA,SAASD,iBAAT,EAA4BV,gBAA5B,EAA8DY,mBAA9D,EAAmFC,iBAAnF,QAAqK,YAArK;;AAGA,MAAMC,eAAe,GAAIC,KAAD,IAAkBA,KAAK,CAACC,cAAN,CAAqBC,YAA/D,C,CACA;AACA;;;AACA,UAAUC,QAAV,GAAqB;AACjB,QAAMnB,SAAS,CAACc,iBAAD,EAAoB,WAAWZ,MAAX,EAAuD;AACtF;AACA,UAAMgB,YAAuB,GAAG,MAAMN,MAAM,CAACG,eAAD,CAA5C;AACA,UAAMK,OAAO,GAAGlB,MAAM,CAACE,OAAvB;AAEA,UAAMiB,MAAM,GAAG,CAAC,GAAGH,YAAJ,EAAkBE,OAAlB,CAAf;AACAE,IAAAA,YAAY,CAACC,OAAb,CAAqB,cAArB,EAAqCC,IAAI,CAACC,SAAL,CAAeJ,MAAf,CAArC,EANsF,CAQtF;;AACA,UAAMX,GAAG,CAACG,mBAAmB,CAACQ,MAAD,CAApB,CAAT;AACH,GAVc,CAAf;AAWH;;AAED,eAAetB,UAAf;AAEA,eAAeA,UAAf","sourcesContent":["// Put effect similar to dispatch in thunk => trigger another action to send data to reducer\n\n\n\n\n// Effects like takeEvery, takeLatest: define when to run the saga (which action type will trigger the saga)\n// Saga have to be triggered. thunk can be called straight away\nfunction* getCountry() {\n    yield takeEvery(GET_COUNTRY_SAGA, function* (action: ReturnType<typeof getCountrySaga>) {\n        const name = action.payload;\n        const url = `https://restcountries.eu/rest/v2/${name ? `name/${name}?fullText=true` : \"all\"}`;\n\n        //@ts-ignore\n        const response = yield fetch(url);\n        //@ts-ignore\n        const data = yield response.json();\n        yield put(getCountrySuccess(data));\n    })\n}\n\n// Put effect similar to dispatch in thunk => trigger another action to send data to reducer\nimport { takeEvery, put, select } from 'redux-saga/effects';\n\nimport { getCountrySuccess, GET_COUNTRY_SAGA, getCountrySaga, reactCountrySuccess, LIKE_COUNTRY_SAGA, UNLIKE_COUNTRY_SAGA, likeCountrySaga, unlikeCountrySaga } from '../actions';\nimport { Store } from '../store';\n\nconst getFavCountries = (store: Store) => store.countryReducer.favCountries;\n// Effects like takeEvery, takeLatest: define when to run the saga (which action type will trigger the saga)\n// Saga have to be triggered. thunk can be called straight away\nfunction* likeSaga() {\n    yield takeEvery(LIKE_COUNTRY_SAGA, function* (action: ReturnType<typeof likeCountrySaga>) {\n        //@ts-ignore\n        const favCountries: Country[] = yield select(getFavCountries);\n        const country = action.payload;\n\n        const newFav = [...favCountries, country];\n        localStorage.setItem(\"favCountries\", JSON.stringify(newFav));\n\n        //@ts-ignore\n        yield put(reactCountrySuccess(newFav));\n    })\n}\n\nexport default getCountry;\n\nexport default getCountry;"]},"metadata":{},"sourceType":"module"}