{"ast":null,"code":"var _s = $RefreshSig$();\n\n// your custom hook goes here\nimport { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getCountrySaga } from '../redux/actions';\n\nfunction useCountry(name) {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(true);\n  const dispatch = useDispatch();\n  let allCountries = useSelector(store => store.countryReducer.searchCountries);\n  let country = useSelector(store => store.countryReducer.country);\n  useEffect(() => {\n    dispatch(getCountrySaga(name));\n    setIsLoading(!isLoading);\n  }, [dispatch, name, isLoading]);\n  return name ? country : allCountries;\n}\n\n_s(useCountry, \"/B0tDB07hoNWZ4wGBgiE9k3hQGM=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\nexport default useCountry;","map":{"version":3,"sources":["/Users/meocuabinh/Documents/Integrify/fs7-finland-react/src/custom-hooks/useCountry.js"],"names":["useEffect","useState","useDispatch","useSelector","getCountrySaga","useCountry","name","isLoading","setIsLoading","dispatch","allCountries","store","countryReducer","searchCountries","country"],"mappings":";;AAAA;AACA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,cAAT,QAA+B,kBAA/B;;AAEA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AAAA;;AACtB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAMQ,QAAQ,GAAGP,WAAW,EAA5B;AAEA,MAAIQ,YAAY,GAAGP,WAAW,CAACQ,KAAK,IAAIA,KAAK,CAACC,cAAN,CAAqBC,eAA/B,CAA9B;AAEA,MAAIC,OAAO,GAAGX,WAAW,CAACQ,KAAK,IAAIA,KAAK,CAACC,cAAN,CAAqBE,OAA/B,CAAzB;AAEAd,EAAAA,SAAS,CAAC,MAAM;AACZS,IAAAA,QAAQ,CAACL,cAAc,CAACE,IAAD,CAAf,CAAR;AACAE,IAAAA,YAAY,CAAC,CAACD,SAAF,CAAZ;AACH,GAHQ,EAGN,CAACE,QAAD,EAAWH,IAAX,EAAiBC,SAAjB,CAHM,CAAT;AAKA,SAAOD,IAAI,GAAGQ,OAAH,GAAaJ,YAAxB;AACH;;GAdQL,U;UAEYH,W,EAEEC,W,EAELA,W;;;AAUlB,eAAeE,UAAf","sourcesContent":["// your custom hook goes here\nimport { useEffect, useState } from \"react\";\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getCountrySaga } from '../redux/actions';\n\nfunction useCountry(name) {\n    const [isLoading, setIsLoading] = useState(true);\n    const dispatch = useDispatch();\n\n    let allCountries = useSelector(store => store.countryReducer.searchCountries);\n\n    let country = useSelector(store => store.countryReducer.country);\n\n    useEffect(() => {\n        dispatch(getCountrySaga(name));\n        setIsLoading(!isLoading);\n    }, [dispatch, name, isLoading])\n\n    return name ? country : allCountries;\n}\n\nexport default useCountry;"]},"metadata":{},"sourceType":"module"}