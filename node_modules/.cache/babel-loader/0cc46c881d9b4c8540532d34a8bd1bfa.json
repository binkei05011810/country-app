{"ast":null,"code":"import { GET_COUNTRY_SUCCESS, LIKE, UNLIKE, SEARCH } from '../actions';\nconst initialState = {\n  favCountries: JSON.parse(window.localStorage.getItem(\"favCountries\")) || [],\n  allCountries: [],\n  searchCountries: [],\n  country: {\n    name: \"\",\n    topLevelDomain: [],\n    alpha2Code: \"\",\n    alpha3Code: \"\",\n    callingCodes: [],\n    capital: \"\",\n    altSpellings: [],\n    region: \"\",\n    subregion: \"\",\n    population: 0,\n    latlng: [0, 0],\n    demonym: \"\",\n    area: 0,\n    gini: 0,\n    timezones: [],\n    borders: [],\n    nativeName: \"\",\n    numericCode: \"\",\n    currencies: [],\n    languages: [],\n    translations: {\n      de: \"\",\n      es: \"\",\n      fr: \"\",\n      ja: \"\",\n      it: \"\",\n      br: \"\",\n      pt: \"\",\n      nl: \"\",\n      hr: \"\",\n      fa: \"\"\n    },\n    flag: \"\",\n    regionalBlocs: [],\n    cioc: \"\"\n  },\n  input: \"\"\n};\n\nconst countryReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case LIKE:\n      const newFav = [...state.favCountries, action.payload\n      /*country*/\n      ];\n      window.localStorage.setItem(\"favCountries\", JSON.stringify(newFav));\n      return { ...state,\n        favCountries: newFav\n      };\n\n    case UNLIKE:\n      const remainingFav = state.favCountries.filter(country => country.name !== action.payload\n      /*countryName*/\n      );\n      window.localStorage.setItem(\"favCountries\", JSON.stringify(remainingFav));\n      return { ...state,\n        favCountries: remainingFav\n      };\n\n    case GET_COUNTRY_SUCCESS:\n      const country = action.payload;\n\n      if (country.length === 1) {\n        return { ...state,\n          country: country[0]\n        };\n      } else {\n        return { ...state,\n          allCountries: country,\n          searchCountries: country\n        };\n      }\n\n    case SEARCH:\n      const input = action.payload;\n      const searchResults = state.allCountries.filter(country => country.name.slice(0, input.length).toLowerCase() === input.toLowerCase());\n      console.log(searchResults);\n      return { ...state,\n        searchCountries: searchResults,\n        input: input\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default countryReducer;","map":{"version":3,"sources":["/Users/meocuabinh/Documents/Integrify/fs7-finland-react-redux-typescript/src/redux/reducers/countryReducer.tsx"],"names":["GET_COUNTRY_SUCCESS","LIKE","UNLIKE","SEARCH","initialState","favCountries","JSON","parse","window","localStorage","getItem","allCountries","searchCountries","country","name","topLevelDomain","alpha2Code","alpha3Code","callingCodes","capital","altSpellings","region","subregion","population","latlng","demonym","area","gini","timezones","borders","nativeName","numericCode","currencies","languages","translations","de","es","fr","ja","it","br","pt","nl","hr","fa","flag","regionalBlocs","cioc","input","countryReducer","state","action","type","newFav","payload","setItem","stringify","remainingFav","filter","length","searchResults","slice","toLowerCase","console","log"],"mappings":"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","sourcesContent":["import { GET_COUNTRY_SUCCESS, LIKE, UNLIKE, SEARCH, AllActions } from '../actions';\nimport { Country } from '../../types/types';\n\ntype CountryState = {\n    favCountries: Country[];\n    allCountries: Country[];\n    searchCountries: Country[]\n    country: Country;\n    input: string\n}\n\nconst initialState: CountryState =\n{\n    favCountries: JSON.parse((window as any).localStorage.getItem(\"favCountries\")) || [],\n    allCountries: [],\n    searchCountries: [],\n    country: {\n        name: \"\",\n        topLevelDomain: [],\n        alpha2Code: \"\",\n        alpha3Code: \"\",\n        callingCodes: [],\n        capital: \"\",\n        altSpellings: [],\n        region: \"\",\n        subregion: \"\",\n        population: 0,\n        latlng: [0, 0],\n        demonym: \"\",\n        area: 0,\n        gini: 0,\n        timezones: [],\n        borders: [],\n        nativeName: \"\",\n        numericCode: \"\",\n        currencies: [],\n        languages: [],\n        translations: {\n            de: \"\",\n            es: \"\",\n            fr: \"\",\n            ja: \"\",\n            it: \"\",\n            br: \"\",\n            pt: \"\",\n            nl: \"\",\n            hr: \"\",\n            fa: \"\"\n        },\n        flag: \"\",\n        regionalBlocs: [],\n        cioc: \"\"\n    },\n    input: \"\"\n};\n\nconst countryReducer = (state = initialState, action: AllActions): CountryState => {\n    switch (action.type) {\n        case LIKE:\n            const newFav = [...state.favCountries, action.payload /*country*/];\n            window.localStorage.setItem(\"favCountries\", JSON.stringify(newFav));\n            return { ...state, favCountries: newFav };\n\n        case UNLIKE:\n            const remainingFav = state.favCountries.filter(country => country.name !== action.payload  /*countryName*/);\n            window.localStorage.setItem(\"favCountries\", JSON.stringify(remainingFav));\n            return { ...state, favCountries: remainingFav };\n\n        case GET_COUNTRY_SUCCESS:\n            const country = action.payload;\n            if (country.length === 1) {\n                return { ...state, country: country[0] };\n            } else {\n                return { ...state, allCountries: country, searchCountries: country };\n            }\n\n        case SEARCH:\n            const input = action.payload;\n            const searchResults = state.allCountries.filter(country => country.name.slice(0, input.length).toLowerCase() === input.toLowerCase());\n            console.log(searchResults);\n            return { ...state, searchCountries: searchResults, input: input }\n        default:\n            return state;\n    }\n}\n\nexport default countryReducer;\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}