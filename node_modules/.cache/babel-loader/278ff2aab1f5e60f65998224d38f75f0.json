{"ast":null,"code":"var _jsxFileName = \"/Users/meocuabinh/Documents/Integrify/fs7-finland-react-redux-typescript/src/components/table/CountryTable.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext, useCallback } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Paper from '@material-ui/core/Paper';\nimport TablePagination from '@material-ui/core/TablePagination'; //import CircularProgress from '@material-ui/core/CircularProgress';\n\nimport useCountry from '../../custom-hooks/useCountry';\nimport CountryTableRow from './CountryTableRow';\nimport CountryTableHead from './CountryTableHead';\nimport getComparator from '../../helperFunctions';\nimport { useDispatch } from 'react-redux';\nimport { getCountrySuccess } from '../../redux/actions';\n//Theme related\nimport { ThemeContext } from '../../App';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles({\n  content: {\n    backgroundColor: theme => theme.palette.background,\n    padding: \"50px 100px\"\n  },\n  container: {\n    borderRadius: \"1rem\",\n    override: \"hidden\",\n    backgroundColor: theme => theme.palette.table\n  },\n  table: {\n    minWidth: 650,\n    backgroundColor: theme => theme.palette.table\n  },\n  pagination: {\n    color: theme => theme.palette.text\n  }\n});\n\nfunction CountryTable() {\n  _s();\n\n  const {\n    currentTheme\n  } = useContext(ThemeContext);\n  const classes = useStyles(currentTheme);\n  const allCountries = useCountry();\n  const dispatch = useDispatch();\n  const [page, setPage] = useState(0); //Ascending or Descending\n\n  const [order, setOrder] = useState(\"asc\"); //Order by name, population or region\n\n  const [orderBy, setOrderBy] = useState(\"name\");\n  const rowsPerPage = 10;\n  const handleChangePage = useCallback((event, newPage) => {\n    setPage(newPage);\n  }, []);\n\n  const sort = () => {\n    const sortedCountries = [...allCountries].sort(getComparator(order, orderBy));\n    console.log(sortedCountries);\n    dispatch(getCountrySuccess(sortedCountries));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: allCountries.length === 0 ? /*#__PURE__*/_jsxDEV(LinearProgress, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 19\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.content,\n        children: [/*#__PURE__*/_jsxDEV(TableContainer, {\n          className: classes.container,\n          component: Paper,\n          children: /*#__PURE__*/_jsxDEV(Table, {\n            className: classes.table,\n            \"aria-label\": \"simple table\",\n            children: [/*#__PURE__*/_jsxDEV(CountryTableHead, {\n              orderBy: orderBy,\n              setOrderBy: setOrderBy,\n              order: order,\n              setOrder: setOrder,\n              sort: sort\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n              children: allCountries.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(country => /*#__PURE__*/_jsxDEV(CountryTableRow, {\n                country: country\n              }, country.name, false, {\n                fileName: _jsxFileName,\n                lineNumber: 98,\n                columnNumber: 45\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(TablePagination, {\n          className: classes.pagination,\n          component: \"div\",\n          count: allCountries.length,\n          page: page,\n          onChangePage: handleChangePage,\n          rowsPerPage: rowsPerPage,\n          rowsPerPageOptions: [5]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 19\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CountryTable, \"GLfieKEDDQ8voL0mHbNop52jNGM=\", false, function () {\n  return [useStyles, useCountry, useDispatch];\n});\n\n_c = CountryTable;\nexport default CountryTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"CountryTable\");","map":{"version":3,"sources":["/Users/meocuabinh/Documents/Integrify/fs7-finland-react-redux-typescript/src/components/table/CountryTable.tsx"],"names":["React","useState","useContext","useCallback","makeStyles","Table","TableBody","TableContainer","LinearProgress","Paper","TablePagination","useCountry","CountryTableRow","CountryTableHead","getComparator","useDispatch","getCountrySuccess","ThemeContext","useStyles","content","backgroundColor","theme","palette","background","padding","container","borderRadius","override","table","minWidth","pagination","color","text","CountryTable","currentTheme","classes","allCountries","dispatch","page","setPage","order","setOrder","orderBy","setOrderBy","rowsPerPage","handleChangePage","event","newPage","sort","sortedCountries","console","log","length","slice","map","country","name"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useCallback } from 'react'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport LinearProgress from '@material-ui/core/LinearProgress';\n\nimport Paper from '@material-ui/core/Paper';\nimport TablePagination from '@material-ui/core/TablePagination';\n\n//import CircularProgress from '@material-ui/core/CircularProgress';\n\nimport { Country } from '../../types/types';\nimport useCountry from '../../custom-hooks/useCountry';\nimport CountryTableRow from './CountryTableRow';\nimport CountryTableHead from './CountryTableHead';\nimport getComparator from '../../helperFunctions';\nimport { useDispatch } from 'react-redux';\nimport { getCountrySuccess } from '../../redux/actions';\nimport Navbar from '../../components/navbar/Navbar';\n\n//Theme related\nimport { ThemeContext } from '../../App';\nimport { Theme } from '../../types/types';\n\nconst useStyles = makeStyles({\n    content: {\n        backgroundColor: (theme: Theme) => theme.palette.background,\n        padding: \"50px 100px\",\n    },\n    container: {\n        borderRadius: \"1rem\",\n        override: \"hidden\",\n        backgroundColor: (theme: Theme) => theme.palette.table,\n    },\n\n    table: {\n        minWidth: 650,\n        backgroundColor: (theme: Theme) => theme.palette.table,\n    },\n\n    pagination: {\n        color: (theme: Theme) => theme.palette.text,\n    }\n});\n\n\nfunction CountryTable() {\n    const { currentTheme } = useContext(ThemeContext);\n    const classes = useStyles(currentTheme);\n\n    const allCountries = useCountry() as Country[];\n    const dispatch = useDispatch();\n\n    const [page, setPage] = useState(0);\n    //Ascending or Descending\n    const [order, setOrder] = useState<\"asc\" | \"desc\">(\"asc\");\n    //Order by name, population or region\n    const [orderBy, setOrderBy] = useState<\"name\" | \"population\" | \"region\">(\"name\");\n    const rowsPerPage = 10;\n\n    const handleChangePage = useCallback(\n        (event: unknown, newPage: number) => {\n            setPage(newPage);\n        }, []\n    );\n\n    const sort = () => {\n        const sortedCountries = [...allCountries].sort(getComparator(order, orderBy));\n        console.log(sortedCountries);\n        dispatch(getCountrySuccess(sortedCountries));\n    }\n\n    return (\n        <div>\n            \n            {allCountries.length === 0\n                ? <LinearProgress />\n                : <div>\n                    \n                    <div className={classes.content}>\n                        <TableContainer className={classes.container} component={Paper}>\n                            <Table\n                                className={classes.table}\n                                aria-label=\"simple table\">\n\n                                <CountryTableHead\n                                    orderBy={orderBy}\n                                    setOrderBy={setOrderBy}\n                                    order={order}\n                                    setOrder={setOrder}\n                                    sort={sort} />\n\n                                <TableBody>\n                                    {allCountries\n                                        .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                                        .map((country: Country) => (\n                                            <CountryTableRow key={country.name} country={country} />\n                                        ))}\n                                </TableBody>\n\n                            </Table>\n                        </TableContainer>\n\n                        <TablePagination\n                            className={classes.pagination}\n                            component=\"div\"\n                            count={allCountries.length}\n                            page={page}\n                            onChangePage={handleChangePage}\n                            rowsPerPage={rowsPerPage}\n                            rowsPerPageOptions={[5]}\n                        />\n                    </div>\n                </div>}\n        </div>\n    )\n}\n\n\nexport default CountryTable;"]},"metadata":{},"sourceType":"module"}