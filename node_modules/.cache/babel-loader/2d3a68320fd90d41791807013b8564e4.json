{"ast":null,"code":"var _s = $RefreshSig$();\n\n// your custom hook goes here\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getCountrySaga } from '../redux/actions';\n\nfunction useCountry(name) {\n  _s();\n\n  //const [isLoading, setIsLoading] = useState(false);\n  const dispatch = useDispatch();\n  let allCountries = useSelector(store => store.countryReducer.searchCountries);\n  console.log(allCountries);\n  let country = useSelector(store => store.countryReducer.country);\n  useEffect(() => {\n    dispatch(getCountrySaga(name));\n  }, [dispatch, name]);\n  return name ? country : allCountries;\n}\n\n_s(useCountry, \"J5XsL4WEGhpfz7maQWxogciTRlg=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\nexport default useCountry;","map":{"version":3,"sources":["/Users/meocuabinh/Documents/Integrify/fs7-finland-react/src/custom-hooks/useCountry.js"],"names":["useEffect","useDispatch","useSelector","getCountrySaga","useCountry","name","dispatch","allCountries","store","countryReducer","searchCountries","console","log","country"],"mappings":";;AAAA;AACA,SAASA,SAAT,QAA0B,OAA1B;AAEA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,cAAT,QAA+B,kBAA/B;;AAEA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AAAA;;AACtB;AACA,QAAMC,QAAQ,GAAGL,WAAW,EAA5B;AAEA,MAAIM,YAAY,GAAGL,WAAW,CAACM,KAAK,IAAIA,KAAK,CAACC,cAAN,CAAqBC,eAA/B,CAA9B;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYL,YAAZ;AACA,MAAIM,OAAO,GAAGX,WAAW,CAACM,KAAK,IAAIA,KAAK,CAACC,cAAN,CAAqBI,OAA/B,CAAzB;AAEAb,EAAAA,SAAS,CAAC,MAAM;AACZM,IAAAA,QAAQ,CAACH,cAAc,CAACE,IAAD,CAAf,CAAR;AACH,GAFQ,EAEN,CAACC,QAAD,EAAWD,IAAX,CAFM,CAAT;AAIA,SAAOA,IAAI,GAAGQ,OAAH,GAAaN,YAAxB;AACH;;GAbQH,U;UAEYH,W,EAEEC,W,EAELA,W;;;AASlB,eAAeE,UAAf","sourcesContent":["// your custom hook goes here\nimport { useEffect } from \"react\";\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getCountrySaga } from '../redux/actions';\n\nfunction useCountry(name) {\n    //const [isLoading, setIsLoading] = useState(false);\n    const dispatch = useDispatch();\n\n    let allCountries = useSelector(store => store.countryReducer.searchCountries);\n    console.log(allCountries);\n    let country = useSelector(store => store.countryReducer.country);\n\n    useEffect(() => {\n        dispatch(getCountrySaga(name));\n    }, [dispatch, name])\n\n    return name ? country : allCountries;\n}\n\nexport default useCountry;"]},"metadata":{},"sourceType":"module"}