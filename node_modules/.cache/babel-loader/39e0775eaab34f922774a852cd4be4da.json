{"ast":null,"code":"import { GET_COUNTRY_SUCCESS, LIKE, UNLIKE } from '../actions';\nconst initialState = {\n  favCountries: [],\n  allCountries: [],\n  country: {}\n};\n\nconst countryReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case LIKE:\n      return { ...state,\n        favCountries: [...state.favCountries, action.payload.country]\n      };\n\n    case UNLIKE:\n      return { ...state,\n        favCountries: state.favCountries.filter(country => country.name !== action.payload.countryName)\n      };\n\n    case GET_COUNTRY_SUCCESS:\n      const country = action.payload.country;\n\n      if (country.length === 1) {\n        return { ...state,\n          country: country[0]\n        };\n      } else {\n        return { ...state,\n          allCountries: country\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default countryR;","map":{"version":3,"sources":["/Users/meocuabinh/Documents/Integrify/fs7-finland-react/src/redux/reducers/countryReducer.js"],"names":["GET_COUNTRY_SUCCESS","LIKE","UNLIKE","initialState","favCountries","allCountries","country","countryReducer","state","action","type","payload","filter","name","countryName","length","countryR"],"mappings":"AAAA,SAASA,mBAAT,EAA8BC,IAA9B,EAAoCC,MAApC,QAAkD,YAAlD;AAEA,MAAMC,YAAY,GAAG;AAAEC,EAAAA,YAAY,EAAE,EAAhB;AAAoBC,EAAAA,YAAY,EAAE,EAAlC;AAAsCC,EAAAA,OAAO,EAAE;AAA/C,CAArB;;AAEA,MAAMC,cAAc,GAAG,CAACC,KAAK,GAAGL,YAAT,EAAuBM,MAAvB,KAAkC;AACrD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKT,IAAL;AACI,aAAO,EAAE,GAAGO,KAAL;AAAYJ,QAAAA,YAAY,EAAE,CAAC,GAAGI,KAAK,CAACJ,YAAV,EAAwBK,MAAM,CAACE,OAAP,CAAeL,OAAvC;AAA1B,OAAP;;AACJ,SAAKJ,MAAL;AACI,aAAO,EAAE,GAAGM,KAAL;AAAYJ,QAAAA,YAAY,EAAEI,KAAK,CAACJ,YAAN,CAAmBQ,MAAnB,CAA0BN,OAAO,IAAIA,OAAO,CAACO,IAAR,KAAiBJ,MAAM,CAACE,OAAP,CAAeG,WAArE;AAA1B,OAAP;;AACJ,SAAKd,mBAAL;AACI,YAAMM,OAAO,GAAGG,MAAM,CAACE,OAAP,CAAeL,OAA/B;;AACA,UAAIA,OAAO,CAACS,MAAR,KAAmB,CAAvB,EAA0B;AACtB,eAAO,EAAE,GAAGP,KAAL;AAAYF,UAAAA,OAAO,EAAEA,OAAO,CAAC,CAAD;AAA5B,SAAP;AACH,OAFD,MAEO;AACH,eAAO,EAAE,GAAGE,KAAL;AAAYH,UAAAA,YAAY,EAAEC;AAA1B,SAAP;AACH;;AACL;AACI,aAAOE,KAAP;AAbR;AAeH,CAhBD;;AAkBA,eAAeQ,QAAf","sourcesContent":["import { GET_COUNTRY_SUCCESS, LIKE, UNLIKE } from '../actions';\n\nconst initialState = { favCountries: [], allCountries: [], country: {} };\n\nconst countryReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case LIKE:\n            return { ...state, favCountries: [...state.favCountries, action.payload.country] };\n        case UNLIKE:\n            return { ...state, favCountries: state.favCountries.filter(country => country.name !== action.payload.countryName) };\n        case GET_COUNTRY_SUCCESS:\n            const country = action.payload.country;\n            if (country.length === 1) {\n                return { ...state, country: country[0] };\n            } else {\n                return { ...state, allCountries: country };\n            }\n        default:\n            return state;\n    }\n}\n\nexport default countryR;\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}