{"ast":null,"code":"var _s = $RefreshSig$();\n\n// your custom hook goes here\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getCountrySaga } from '../redux/actions';\n\nfunction useCountry(name) {\n  _s();\n\n  const dispatch = useDispatch();\n  let allCountries = useSelector(store => store.countryReducer.searchCountries);\n  let country = useSelector(store => store.countryReducer.country);\n  useEffect(() => {\n    dispatch(getCountrySaga(name));\n  }, [dispatch, name]);\n  return name ? country : allCountries;\n}\n\n_s(useCountry, \"J5XsL4WEGhpfz7maQWxogciTRlg=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\nexport default useCountry;","map":{"version":3,"sources":["/Users/meocuabinh/Documents/Integrify/fs7-finland-react-redux-typescript/src/custom-hooks/useCountry.tsx"],"names":["useEffect","useDispatch","useSelector","getCountrySaga","useCountry","name","dispatch","allCountries","store","countryReducer","searchCountries","country"],"mappings":";;AAAA;AACA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAGA,SAASC,cAAT,QAA+B,kBAA/B;;AAIA,SAASC,UAAT,CAAoBC,IAApB,EAAoE;AAAA;;AAChE,QAAMC,QAAQ,GAAGL,WAAW,EAA5B;AAEA,MAAIM,YAAY,GAAGL,WAAW,CAAEM,KAAD,IAAkBA,KAAK,CAACC,cAAN,CAAqBC,eAAxC,CAA9B;AACA,MAAIC,OAAO,GAAGT,WAAW,CAAEM,KAAD,IAAkBA,KAAK,CAACC,cAAN,CAAqBE,OAAxC,CAAzB;AAEAX,EAAAA,SAAS,CAAC,MAAM;AACZM,IAAAA,QAAQ,CAACH,cAAc,CAACE,IAAD,CAAf,CAAR;AACH,GAFQ,EAEN,CAACC,QAAD,EAAWD,IAAX,CAFM,CAAT;AAIA,SAAOA,IAAI,GAAGM,OAAH,GAAaJ,YAAxB;AACH;;GAXQH,U;UACYH,W,EAEEC,W,EACLA,W;;;AASlB,eAAeE,UAAf","sourcesContent":["// your custom hook goes here\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport {useLocation} from 'react-'\n\nimport { getCountrySaga } from '../redux/actions';\nimport { Country } from '../types/types';\nimport { Store } from '../redux/store';\n\nfunction useCountry(name?: string): Country | Country[] | undefined {\n    const dispatch = useDispatch();\n\n    let allCountries = useSelector((store: Store) => store.countryReducer.searchCountries);\n    let country = useSelector((store: Store) => store.countryReducer.country);\n\n    useEffect(() => {\n        dispatch(getCountrySaga(name));\n    }, [dispatch, name])\n\n    return name ? country : allCountries;\n}\n\nexport default useCountry;"]},"metadata":{},"sourceType":"module"}