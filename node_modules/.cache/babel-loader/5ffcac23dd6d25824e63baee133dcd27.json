{"ast":null,"code":"// Put effect similar to dispatch in thunk => trigger another action to send data to reducer\nimport { takeEvery, put, select, fork, all } from 'redux-saga/effects';\n// Effects like takeEvery, takeLatest: define when to run the saga (which action type will trigger the saga)\n// Saga have to be triggered. thunk can be called straight away\nimport { getCountrySuccess, GET_COUNTRY_SAGA, reactCountrySuccess, LIKE_COUNTRY_SAGA, UNLIKE_COUNTRY_SAGA, SEARCH_COUNTRY_SAGA, searchCountrySuccess } from '../actions';\n\nfunction* getCountry() {\n  yield takeEvery(GET_COUNTRY_SAGA, function* (action) {\n    const name = action.payload;\n    const url = `https://restcountries.eu/rest/v2/${name ? `name/${name}?fullText=true` : \"all\"}`; //@ts-ignore\n\n    const response = yield fetch(url); //@ts-ignore\n\n    const data = yield response.json();\n    yield put(getCountrySuccess(data));\n  });\n} // Put effect similar to dispatch in thunk => trigger another action to send data to reducer\n\n\nconst getFavCountries = store => store.countryReducer.favCountries; // Effects like takeEvery, takeLatest: define when to run the saga (which action type will trigger the saga)\n// Saga have to be triggered. thunk can be called straight away\n\n\nfunction* likeSaga() {\n  yield takeEvery(LIKE_COUNTRY_SAGA, function* (action) {\n    //@ts-ignore\n    const favCountries = yield select(getFavCountries);\n    const country = action.payload;\n    const newFav = [...favCountries, country];\n    localStorage.setItem(\"favCountries\", JSON.stringify(newFav)); //@ts-ignore\n\n    yield put(reactCountrySuccess(newFav));\n  });\n}\n\nfunction* unlikeSaga() {\n  yield takeEvery(UNLIKE_COUNTRY_SAGA, function* (action) {\n    //@ts-ignore\n    const favCountries = yield select(getFavCountries);\n    const countryName = action.payload;\n    const remainingFav = favCountries.filter(country => country.name !== countryName);\n    localStorage.setItem(\"favCountries\", JSON.stringify(remainingFav)); //@ts-ignore\n\n    yield put(reactCountrySuccess(remainingFav));\n  });\n}\n\nconst getAllCountries = store => store.countryReducer.allCountries;\n\nfunction* searchSaga() {\n  yield takeEvery(SEARCH_COUNTRY_SAGA, function* (action) {\n    console.log(\"hehe\"); //@ts-ignore\n\n    const allCountries = yield select(getAllCountries);\n    const input = action.payload;\n    const searchResults = allCountries.filter(country => country.name.slice(0, input.length).toLowerCase() === input.toLowerCase());\n    localStorage.setItem(\"searchInput\", input); //@ts-ignore\n\n    yield put(searchCountrySuccess(input, searchResults));\n  });\n}\n\nfunction* rootSaga() {\n  //@ts-ignore\n  yield all([fork(getCountry), fork(likeSaga), fork(unlikeSaga), fork(searchSaga)]);\n}\n\nexport default rootSaga;","map":{"version":3,"sources":["/Users/meocuabinh/Documents/Integrify/fs7-finland-react-redux-typescript/src/redux/saga/sagas.ts"],"names":["takeEvery","put","select","fork","all","getCountrySuccess","GET_COUNTRY_SAGA","reactCountrySuccess","LIKE_COUNTRY_SAGA","UNLIKE_COUNTRY_SAGA","SEARCH_COUNTRY_SAGA","searchCountrySuccess","getCountry","action","name","payload","url","response","fetch","data","json","getFavCountries","store","countryReducer","favCountries","likeSaga","country","newFav","localStorage","setItem","JSON","stringify","unlikeSaga","countryName","remainingFav","filter","getAllCountries","allCountries","searchSaga","console","log","input","searchResults","slice","length","toLowerCase","rootSaga"],"mappings":"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","sourcesContent":["// Put effect similar to dispatch in thunk => trigger another action to send data to reducer\nimport { takeEvery, put, select, fork, all } from 'redux-saga/effects';\nimport { SagaIterator } from '@redux-saga/core';\n// Effects like takeEvery, takeLatest: define when to run the saga (which action type will trigger the saga)\n// Saga have to be triggered. thunk can be called straight away\n\nimport {\n    getCountrySuccess,\n    GET_COUNTRY_SAGA,\n    getCountrySaga,\n    reactCountrySuccess,\n    LIKE_COUNTRY_SAGA,\n    UNLIKE_COUNTRY_SAGA,\n    likeCountrySaga,\n    unlikeCountrySaga,\n    SEARCH_COUNTRY_SAGA,\n    searchCountrySaga,\n    searchCountrySuccess\n} from '../actions';\nimport { Store } from '../store';\nimport { Country } from '../../types/types';\n\nfunction* getCountry(): SagaIterator {\n    yield takeEvery(GET_COUNTRY_SAGA, function* (action: ReturnType<typeof getCountrySaga>) {\n        const name = action.payload;\n        const url = `https://restcountries.eu/rest/v2/${name ? `name/${name}?fullText=true` : \"all\"}`;\n\n        //@ts-ignore\n        const response = yield fetch(url);\n        //@ts-ignore\n        const data = yield response.json();\n        yield put(getCountrySuccess(data));\n    })\n}\n\n// Put effect similar to dispatch in thunk => trigger another action to send data to reducer\n\nconst getFavCountries = (store: Store) => store.countryReducer.favCountries;\n// Effects like takeEvery, takeLatest: define when to run the saga (which action type will trigger the saga)\n// Saga have to be triggered. thunk can be called straight away\n\nfunction* likeSaga(): SagaIterator {\n    yield takeEvery(LIKE_COUNTRY_SAGA, function* (action: ReturnType<typeof likeCountrySaga>) {\n        //@ts-ignore\n        const favCountries: Country[] = yield select(getFavCountries);\n        const country = action.payload;\n\n        const newFav = [...favCountries, country];\n        localStorage.setItem(\"favCountries\", JSON.stringify(newFav));\n\n        //@ts-ignore\n        yield put(reactCountrySuccess(newFav));\n    })\n}\n\nfunction* unlikeSaga(): SagaIterator {\n    yield takeEvery(UNLIKE_COUNTRY_SAGA, function* (action: ReturnType<typeof unlikeCountrySaga>) {\n        //@ts-ignore\n        const favCountries: Country[] = yield select(getFavCountries);\n        const countryName = action.payload;\n\n        const remainingFav = favCountries.filter((country: Country) => country.name !== countryName);\n        localStorage.setItem(\"favCountries\", JSON.stringify(remainingFav));\n\n        //@ts-ignore\n        yield put(reactCountrySuccess(remainingFav));\n    })\n}\n\nconst getAllCountries = (store: Store) => store.countryReducer.allCountries;\n\nfunction* searchSaga(): SagaIterator {\n    yield takeEvery(SEARCH_COUNTRY_SAGA, function* (action: ReturnType<typeof searchCountrySaga>) {\n        console.log(\"hehe\");\n        //@ts-ignore\n        const allCountries: Country[] = yield select(getAllCountries);\n        const input = action.payload;\n        const searchResults = allCountries.filter((country: Country) => country.name.slice(0, input.length).toLowerCase() === input.toLowerCase());\n        localStorage.setItem(\"searchInput\", input);\n\n        //@ts-ignore\n        yield put(searchCountrySuccess(input, searchResults));\n    })\n}\n\nfunction* rootSaga() {\n    //@ts-ignore\n    yield all([fork(getCountry), fork(likeSaga), fork(unlikeSaga), fork(searchSaga)])\n}\n\nexport default rootSaga;\n"]},"metadata":{},"sourceType":"module"}