{"ast":null,"code":"// Put effect similar to dispatch in thunk => trigger another action to send data to reducer\nimport { takeEvery, put, select, fork, all } from 'redux-saga/effects';\n// Effects like takeEvery, takeLatest: define when to run the saga (which action type will trigger the saga)\n// Saga have to be triggered. thunk can be called straight away\nimport { getCountrySuccess, GET_COUNTRY_SAGA, reactCountrySuccess, LIKE_COUNTRY_SAGA, UNLIKE_COUNTRY_SAGA\n/*SEARCH_COUNTRY_SAGA,\nsearchCountrySaga,\nsearchCountrySuccess*/\n} from '../actions';\n\nfunction* getCountry() {\n  yield takeEvery(GET_COUNTRY_SAGA, function* (action) {\n    const {\n      input,\n      name\n    } = action.payload;\n    const url = `https://restcountries.eu/rest/v2/${name ? `name/${name}?fullText=true` : \"all\"}`; //@ts-ignore\n\n    const response = yield fetch(url); //@ts-ignore\n\n    const data = yield response.json();\n    let searchCountries = [];\n\n    if (!name) {\n      searchCountries = data.filter(country => country.name.slice(0, input.length).toLowerCase() === input.toLowerCase());\n    }\n\n    yield put(getCountrySuccess(data, searchCountries));\n  });\n} // Put effect similar to dispatch in thunk => trigger another action to send data to reducer\n\n\nconst getFavCountries = store => store.countryReducer.favCountries; // Effects like takeEvery, takeLatest: define when to run the saga (which action type will trigger the saga)\n// Saga have to be triggered. thunk can be called straight away\n\n\nfunction* likeSaga() {\n  yield takeEvery(LIKE_COUNTRY_SAGA, function* (action) {\n    //@ts-ignore\n    const favCountries = yield select(getFavCountries);\n    const country = action.payload;\n    const newFav = [...favCountries, country];\n    localStorage.setItem(\"favCountries\", JSON.stringify(newFav)); //@ts-ignore\n\n    yield put(reactCountrySuccess(newFav));\n  });\n}\n\nfunction* unlikeSaga() {\n  yield takeEvery(UNLIKE_COUNTRY_SAGA, function* (action) {\n    //@ts-ignore\n    const favCountries = yield select(getFavCountries);\n    const countryName = action.payload;\n    const remainingFav = favCountries.filter(country => country.name !== countryName);\n    localStorage.setItem(\"favCountries\", JSON.stringify(remainingFav)); //@ts-ignore\n\n    yield put(reactCountrySuccess(remainingFav));\n  });\n} //const getAllCountries = (store: Store) => store.countryReducer.allCountries;\n\n/*function* searchSaga(): SagaIterator {\n    yield takeEvery(SEARCH_COUNTRY_SAGA, function* (action: ReturnType<typeof searchCountrySaga>) {\n        //@ts-ignore\n        const allCountries: Country[] = yield select(getAllCountries);\n        const input = action.payload;\n        const searchResults = allCountries.filter((country: Country) => country.name.slice(0, input.length).toLowerCase() === input.toLowerCase());\n        localStorage.setItem(\"searchInput\", input);\n\n        //@ts-ignore\n        yield put(searchCountrySuccess(input, searchResults));\n    })\n}*/\n\n\nfunction* rootSaga() {\n  //@ts-ignore\n  yield all([fork(getCountry), fork(likeSaga), fork(unlikeSaga)\n  /*, fork(searchSaga)*/\n  ]);\n}\n\nexport default rootSaga;","map":{"version":3,"sources":["/Users/meocuabinh/Documents/Integrify/fs7-finland-react-redux-typescript/src/redux/saga/sagas.ts"],"names":["takeEvery","put","select","fork","all","getCountrySuccess","GET_COUNTRY_SAGA","reactCountrySuccess","LIKE_COUNTRY_SAGA","UNLIKE_COUNTRY_SAGA","getCountry","action","input","name","payload","url","response","fetch","data","json","searchCountries","filter","country","slice","length","toLowerCase","getFavCountries","store","countryReducer","favCountries","likeSaga","newFav","localStorage","setItem","JSON","stringify","unlikeSaga","countryName","remainingFav","rootSaga"],"mappings":"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","sourcesContent":["// Put effect similar to dispatch in thunk => trigger another action to send data to reducer\nimport { takeEvery, put, select, fork, all } from 'redux-saga/effects';\nimport { SagaIterator } from '@redux-saga/core';\n// Effects like takeEvery, takeLatest: define when to run the saga (which action type will trigger the saga)\n// Saga have to be triggered. thunk can be called straight away\n\nimport {\n    getCountrySuccess,\n    GET_COUNTRY_SAGA,\n    getCountrySaga,\n    reactCountrySuccess,\n    LIKE_COUNTRY_SAGA,\n    UNLIKE_COUNTRY_SAGA,\n    likeCountrySaga,\n    unlikeCountrySaga,\n    /*SEARCH_COUNTRY_SAGA,\n    searchCountrySaga,\n    searchCountrySuccess*/\n} from '../actions';\nimport { Store } from '../store';\nimport { Country } from '../../types/types';\n\nfunction* getCountry(): SagaIterator {\n    yield takeEvery(GET_COUNTRY_SAGA, function* (action: ReturnType<typeof getCountrySaga>) {\n        const { input, name } = action.payload;\n        const url = `https://restcountries.eu/rest/v2/${name ? `name/${name}?fullText=true` : \"all\"}`;\n\n        //@ts-ignore\n        const response = yield fetch(url);\n        //@ts-ignore\n        const data = yield response.json();\n\n        let searchCountries: Country[] = [];\n\n        if (!name) {\n            searchCountries = data.filter((country: Country) =>\n                country.name.slice(0, input.length).toLowerCase() === input.toLowerCase()\n            )\n        }\n\n        yield put(getCountrySuccess(data, searchCountries));\n    })\n}\n\n// Put effect similar to dispatch in thunk => trigger another action to send data to reducer\n\nconst getFavCountries = (store: Store) => store.countryReducer.favCountries;\n// Effects like takeEvery, takeLatest: define when to run the saga (which action type will trigger the saga)\n// Saga have to be triggered. thunk can be called straight away\n\nfunction* likeSaga(): SagaIterator {\n    yield takeEvery(LIKE_COUNTRY_SAGA, function* (action: ReturnType<typeof likeCountrySaga>) {\n        //@ts-ignore\n        const favCountries: Country[] = yield select(getFavCountries);\n        const country = action.payload;\n\n        const newFav = [...favCountries, country];\n        localStorage.setItem(\"favCountries\", JSON.stringify(newFav));\n\n        //@ts-ignore\n        yield put(reactCountrySuccess(newFav));\n    })\n}\n\nfunction* unlikeSaga(): SagaIterator {\n    yield takeEvery(UNLIKE_COUNTRY_SAGA, function* (action: ReturnType<typeof unlikeCountrySaga>) {\n        //@ts-ignore\n        const favCountries: Country[] = yield select(getFavCountries);\n        const countryName = action.payload;\n\n        const remainingFav = favCountries.filter((country: Country) => country.name !== countryName);\n        localStorage.setItem(\"favCountries\", JSON.stringify(remainingFav));\n\n        //@ts-ignore\n        yield put(reactCountrySuccess(remainingFav));\n    })\n}\n\n//const getAllCountries = (store: Store) => store.countryReducer.allCountries;\n\n/*function* searchSaga(): SagaIterator {\n    yield takeEvery(SEARCH_COUNTRY_SAGA, function* (action: ReturnType<typeof searchCountrySaga>) {\n        //@ts-ignore\n        const allCountries: Country[] = yield select(getAllCountries);\n        const input = action.payload;\n        const searchResults = allCountries.filter((country: Country) => country.name.slice(0, input.length).toLowerCase() === input.toLowerCase());\n        localStorage.setItem(\"searchInput\", input);\n\n        //@ts-ignore\n        yield put(searchCountrySuccess(input, searchResults));\n    })\n}*/\n\nfunction* rootSaga() {\n    //@ts-ignore\n    yield all([fork(getCountry), fork(likeSaga), fork(unlikeSaga)/*, fork(searchSaga)*/])\n}\n\nexport default rootSaga;\n"]},"metadata":{},"sourceType":"module"}