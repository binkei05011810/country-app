{"ast":null,"code":"import { GET_COUNTRY_SUCCESS, LIKE, UNLIKE, SEARCH } from '../actions';\nconst initialState = {\n  favCountries: JSON.parse(window.localStorage.getItem(\"favCountries\")) || [],\n  allCountries: [],\n  searchCountries: [],\n  input: \"\"\n};\n\nconst countryReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case LIKE:\n      const newFav = [...state.favCountries, action.payload\n      /*country*/\n      ];\n      localStorage.setItem(\"favCountries\", JSON.stringify(newFav));\n      return { ...state,\n        favCountries: newFav\n      };\n\n    case UNLIKE:\n      const remainingFav = state.favCountries.filter(country => country.name !== action.payload\n      /*countryName*/\n      );\n      localStorage.setItem(\"favCountries\", JSON.stringify(remainingFav));\n      return { ...state,\n        favCountries: remainingFav\n      };\n\n    case GET_COUNTRY_SUCCESS:\n      const country = action.payload;\n\n      if (country.length === 1) {\n        return { ...state,\n          country: country[0]\n        };\n      } else {\n        return { ...state,\n          allCountries: country,\n          searchCountries: country\n        };\n      }\n\n    case SEARCH:\n      const input = action.payload;\n      const searchResults = state.allCountries.filter(country => country.name.slice(0, input.length).toLowerCase() === input.toLowerCase());\n      console.log(searchResults);\n      return { ...state,\n        searchCountries: searchResults,\n        input: input\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default countryReducer;","map":{"version":3,"sources":["/Users/meocuabinh/Documents/Integrify/fs7-finland-react-redux-typescript/src/redux/reducers/countryReducer.tsx"],"names":["GET_COUNTRY_SUCCESS","LIKE","UNLIKE","SEARCH","initialState","favCountries","JSON","parse","window","localStorage","getItem","allCountries","searchCountries","input","countryReducer","state","action","type","newFav","payload","setItem","stringify","remainingFav","filter","country","name","length","searchResults","slice","toLowerCase","console","log"],"mappings":"AAAA,SAASA,mBAAT,EAA8BC,IAA9B,EAAoCC,MAApC,EAA4CC,MAA5C,QAAsE,YAAtE;AAWA,MAAMC,YAA0B,GAChC;AACIC,EAAAA,YAAY,EAAEC,IAAI,CAACC,KAAL,CAAYC,MAAD,CAAgBC,YAAhB,CAA6BC,OAA7B,CAAqC,cAArC,CAAX,KAAoE,EADtF;AAEIC,EAAAA,YAAY,EAAE,EAFlB;AAGIC,EAAAA,eAAe,EAAE,EAHrB;AAIIC,EAAAA,KAAK,EAAE;AAJX,CADA;;AAQA,MAAMC,cAAc,GAAG,CAACC,KAAK,GAAGX,YAAT,EAAuBY,MAAvB,KAA4D;AAC/E,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKhB,IAAL;AACI,YAAMiB,MAAM,GAAG,CAAC,GAAGH,KAAK,CAACV,YAAV,EAAwBW,MAAM,CAACG;AAAQ;AAAvC,OAAf;AACAV,MAAAA,YAAY,CAACW,OAAb,CAAqB,cAArB,EAAqCd,IAAI,CAACe,SAAL,CAAeH,MAAf,CAArC;AACA,aAAO,EAAE,GAAGH,KAAL;AAAYV,QAAAA,YAAY,EAAEa;AAA1B,OAAP;;AAEJ,SAAKhB,MAAL;AACI,YAAMoB,YAAY,GAAGP,KAAK,CAACV,YAAN,CAAmBkB,MAAnB,CAA0BC,OAAO,IAAIA,OAAO,CAACC,IAAR,KAAiBT,MAAM,CAACG;AAAS;AAAtE,OAArB;AACAV,MAAAA,YAAY,CAACW,OAAb,CAAqB,cAArB,EAAqCd,IAAI,CAACe,SAAL,CAAeC,YAAf,CAArC;AACA,aAAO,EAAE,GAAGP,KAAL;AAAYV,QAAAA,YAAY,EAAEiB;AAA1B,OAAP;;AAEJ,SAAKtB,mBAAL;AACI,YAAMwB,OAAO,GAAGR,MAAM,CAACG,OAAvB;;AACA,UAAIK,OAAO,CAACE,MAAR,KAAmB,CAAvB,EAA0B;AACtB,eAAO,EAAE,GAAGX,KAAL;AAAYS,UAAAA,OAAO,EAAEA,OAAO,CAAC,CAAD;AAA5B,SAAP;AACH,OAFD,MAEO;AACH,eAAO,EAAE,GAAGT,KAAL;AAAYJ,UAAAA,YAAY,EAAEa,OAA1B;AAAmCZ,UAAAA,eAAe,EAAEY;AAApD,SAAP;AACH;;AAEL,SAAKrB,MAAL;AACI,YAAMU,KAAK,GAAGG,MAAM,CAACG,OAArB;AACA,YAAMQ,aAAa,GAAGZ,KAAK,CAACJ,YAAN,CAAmBY,MAAnB,CAA0BC,OAAO,IAAIA,OAAO,CAACC,IAAR,CAAaG,KAAb,CAAmB,CAAnB,EAAsBf,KAAK,CAACa,MAA5B,EAAoCG,WAApC,OAAsDhB,KAAK,CAACgB,WAAN,EAA3F,CAAtB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,aAAZ;AACA,aAAO,EAAE,GAAGZ,KAAL;AAAYH,QAAAA,eAAe,EAAEe,aAA7B;AAA4Cd,QAAAA,KAAK,EAAEA;AAAnD,OAAP;;AACJ;AACI,aAAOE,KAAP;AAzBR;AA2BH,CA5BD;;AA8BA,eAAeD,cAAf","sourcesContent":["import { GET_COUNTRY_SUCCESS, LIKE, UNLIKE, SEARCH, AllActions } from '../actions';\nimport { Country } from '../../types/types';\n\ntype CountryState = {\n    favCountries: Country[];\n    allCountries: Country[];\n    searchCountries: Country[]\n    country?: Country;\n    input: string\n}\n\nconst initialState: CountryState =\n{\n    favCountries: JSON.parse((window as any).localStorage.getItem(\"favCountries\")) || [],\n    allCountries: [],\n    searchCountries: [],\n    input: \"\"\n};\n\nconst countryReducer = (state = initialState, action: AllActions): CountryState => {\n    switch (action.type) {\n        case LIKE:\n            const newFav = [...state.favCountries, action.payload /*country*/];\n            localStorage.setItem(\"favCountries\", JSON.stringify(newFav));\n            return { ...state, favCountries: newFav };\n\n        case UNLIKE:\n            const remainingFav = state.favCountries.filter(country => country.name !== action.payload  /*countryName*/);\n            localStorage.setItem(\"favCountries\", JSON.stringify(remainingFav));\n            return { ...state, favCountries: remainingFav };\n\n        case GET_COUNTRY_SUCCESS:\n            const country = action.payload;\n            if (country.length === 1) {\n                return { ...state, country: country[0] };\n            } else {\n                return { ...state, allCountries: country, searchCountries: country };\n            }\n\n        case SEARCH:\n            const input = action.payload;\n            const searchResults = state.allCountries.filter(country => country.name.slice(0, input.length).toLowerCase() === input.toLowerCase());\n            console.log(searchResults);\n            return { ...state, searchCountries: searchResults, input: input }\n        default:\n            return state;\n    }\n}\n\nexport default countryReducer;\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}