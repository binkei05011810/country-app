{"ast":null,"code":"import { createStore, compose, combineReducers, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport countryReducer from './reducers/countryReducer';\nimport toggleReducer from './reducers/toggleReducer';\nimport rootSaga from './saga/sagas';\nconst rootReducer = combineReducers({\n  countryReducer,\n  toggleReducer\n});\nconst initialState = {\n  countryReducer: {\n    favCountries: JSON.parse(window.localStorage.getItem(\"favCountries\")) || [],\n    allCountries: [],\n    searchCountries: [],\n    input: \"\"\n  },\n  toggleReducer: {\n    open: false\n  }\n};\n\nconst makeStore = () => {\n  const sagaMiddleware = createSagaMiddleware();\n  let composeEnhancers = compose;\n\n  if (process.env.NODE_ENV === 'development') {\n    if (window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) {\n      composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n        trace: true\n      });\n    }\n  }\n\n  const store = createStore(rootReducer, initialState, composeEnhancers(applyMiddleware(sagaMiddleware)));\n  sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nexport default makeStore;","map":{"version":3,"sources":["/Users/meocuabinh/Documents/Integrify/fs7-finland-react-redux-typescript/src/redux/store.tsx"],"names":["createStore","compose","combineReducers","applyMiddleware","createSagaMiddleware","countryReducer","toggleReducer","rootSaga","rootReducer","initialState","favCountries","JSON","parse","window","localStorage","getItem","allCountries","searchCountries","input","open","makeStore","sagaMiddleware","composeEnhancers","process","env","NODE_ENV","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","trace","store","run"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,OAAtB,EAA+BC,eAA/B,EAAgDC,eAAhD,QAAuE,OAAvE;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AAEA,OAAOC,cAAP,MAA2B,2BAA3B;AACA,OAAOC,aAAP,MAA0B,0BAA1B;AACA,OAAOC,QAAP,MAAqB,cAArB;AAEA,MAAMC,WAAW,GAAGN,eAAe,CAAC;AAAEG,EAAAA,cAAF;AAAkBC,EAAAA;AAAlB,CAAD,CAAnC;AAIA,MAAMG,YAAmB,GAAG;AACxBJ,EAAAA,cAAc,EAAE;AACZK,IAAAA,YAAY,EAAEC,IAAI,CAACC,KAAL,CAAYC,MAAD,CAAgBC,YAAhB,CAA6BC,OAA7B,CAAqC,cAArC,CAAX,KAAoE,EADtE;AAEZC,IAAAA,YAAY,EAAE,EAFF;AAGZC,IAAAA,eAAe,EAAE,EAHL;AAIZC,IAAAA,KAAK,EAAE;AAJK,GADQ;AAOxBZ,EAAAA,aAAa,EAAE;AACXa,IAAAA,IAAI,EAAE;AADK;AAPS,CAA5B;;AAYA,MAAMC,SAAS,GAAG,MAAM;AACpB,QAAMC,cAAc,GAAGjB,oBAAoB,EAA3C;AACA,MAAIkB,gBAAgB,GAAGrB,OAAvB;;AAEA,MAAIsB,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAA7B,EAA4C;AACxC,QAAKZ,MAAD,CAAgBa,oCAApB,EAA0D;AACtDJ,MAAAA,gBAAgB,GAAIT,MAAD,CAAgBa,oCAAhB,CAAqD;AACpEC,QAAAA,KAAK,EAAE;AAD6D,OAArD,CAAnB;AAGH;AACJ;;AACD,QAAMC,KAAK,GAAG5B,WAAW,CACrBQ,WADqB,EAErBC,YAFqB,EAGrBa,gBAAgB,CAACnB,eAAe,CAACkB,cAAD,CAAhB,CAHK,CAAzB;AAMAA,EAAAA,cAAc,CAACQ,GAAf,CAAmBtB,QAAnB;AAEA,SAAOqB,KAAP;AACH,CApBD;;AAsBA,eAAeR,SAAf","sourcesContent":["import { createStore, compose, combineReducers, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga'\n\nimport countryReducer from './reducers/countryReducer';\nimport toggleReducer from './reducers/toggleReducer';\nimport rootSaga from './saga/sagas';\n\nconst rootReducer = combineReducers({ countryReducer, toggleReducer });\n\nexport type Store = ReturnType<typeof rootReducer>;\n\nconst initialState: Store = {\n    countryReducer: {\n        favCountries: JSON.parse((window as any).localStorage.getItem(\"favCountries\")) || [],\n        allCountries: [],\n        searchCountries: [],\n        input: \"\"\n    },\n    toggleReducer: {\n        open: false\n    },\n}\n\nconst makeStore = () => {\n    const sagaMiddleware = createSagaMiddleware();\n    let composeEnhancers = compose;\n\n    if (process.env.NODE_ENV === 'development') {\n        if ((window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) {\n            composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n                trace: true\n            })\n        }\n    }\n    const store = createStore(\n        rootReducer,\n        initialState,\n        composeEnhancers(applyMiddleware(sagaMiddleware)),\n    );\n\n    sagaMiddleware.run(rootSaga as any);\n\n    return store;\n}\n\nexport default makeStore;"]},"metadata":{},"sourceType":"module"}