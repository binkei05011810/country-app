{"ast":null,"code":"// Put effect similar to dispatch in thunk => trigger another action to send data to reducer\nimport { takeEvery, put, select, fork, all } from 'redux-saga/effects';\n// Effects like takeEvery, takeLatest: define when to run the saga (which action type will trigger the saga)\n// Saga have to be triggered. thunk can be called straight away\nimport { getCountrySuccess, GET_COUNTRY_SAGA, reactCountrySuccess, LIKE_COUNTRY_SAGA, UNLIKE_COUNTRY_SAGA } from '../actions';\nexport function* getCountry() {\n  yield takeEvery(GET_COUNTRY_SAGA, function* (action) {\n    const name = action.payload;\n    const url = `https://restcountries.eu/rest/v2/${name ? `name/${name}?fullText=true` : \"all\"}`; //@ts-ignore\n\n    const response = yield fetch(url); //@ts-ignore\n\n    const data = yield response.json();\n    yield put(getCountrySuccess(data));\n  });\n} // Put effect similar to dispatch in thunk => trigger another action to send data to reducer\n\nconst getFavCountries = store => store.countryReducer.favCountries; // Effects like takeEvery, takeLatest: define when to run the saga (which action type will trigger the saga)\n// Saga have to be triggered. thunk can be called straight away\n\n\nexport function* likeSaga() {\n  yield takeEvery(LIKE_COUNTRY_SAGA, function* (action) {\n    //@ts-ignore\n    const favCountries = yield select(getFavCountries);\n    const country = action.payload;\n    const newFav = [...favCountries, country];\n    localStorage.setItem(\"favCountries\", JSON.stringify(newFav)); //@ts-ignore\n\n    yield put(reactCountrySuccess(newFav));\n  });\n}\nexport function* unlikeSaga() {\n  yield takeEvery(UNLIKE_COUNTRY_SAGA, function* (action) {\n    //@ts-ignore\n    const favCountries = yield select(getFavCountries);\n    const countryName = action.payload;\n    const remainingFav = favCountries.filter(country => country.name !== countryName);\n    localStorage.setItem(\"favCountries\", JSON.stringify(remainingFav)); //@ts-ignore\n\n    yield put(reactCountrySuccess(remainingFav));\n  });\n}\nexport function* rootSaga() {\n  //@ts-ignore\n  yield all([fork(getCountry), fork(likeSaga), fork(unlikeSaga)]);\n}\nexport default rootSaga;","map":{"version":3,"sources":["/Users/meocuabinh/Documents/Integrify/fs7-finland-react-redux-typescript/src/redux/saga/sagas.ts"],"names":["takeEvery","put","select","fork","all","getCountrySuccess","GET_COUNTRY_SAGA","reactCountrySuccess","LIKE_COUNTRY_SAGA","UNLIKE_COUNTRY_SAGA","getCountry","action","name","payload","url","response","fetch","data","json","getFavCountries","store","countryReducer","favCountries","likeSaga","country","newFav","localStorage","setItem","JSON","stringify","unlikeSaga","countryName","remainingFav","filter","rootSaga"],"mappings":"AAAA;AACA,SAASA,SAAT,EAAoBC,GAApB,EAAyBC,MAAzB,EAAiCC,IAAjC,EAAuCC,GAAvC,QAAkD,oBAAlD;AAEA;AACA;AAEA,SAASC,iBAAT,EAA4BC,gBAA5B,EAA8DC,mBAA9D,EAAmFC,iBAAnF,EAAsGC,mBAAtG,QAAqK,YAArK;AAIA,OAAO,UAAUC,UAAV,GAAqC;AACxC,QAAMV,SAAS,CAACM,gBAAD,EAAmB,WAAWK,MAAX,EAAsD;AACpF,UAAMC,IAAI,GAAGD,MAAM,CAACE,OAApB;AACA,UAAMC,GAAG,GAAI,oCAAmCF,IAAI,GAAI,QAAOA,IAAK,gBAAhB,GAAkC,KAAM,EAA5F,CAFoF,CAIpF;;AACA,UAAMG,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAD,CAA5B,CALoF,CAMpF;;AACA,UAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AACA,UAAMjB,GAAG,CAACI,iBAAiB,CAACY,IAAD,CAAlB,CAAT;AACH,GATc,CAAf;AAUH,C,CAED;;AAEA,MAAME,eAAe,GAAIC,KAAD,IAAkBA,KAAK,CAACC,cAAN,CAAqBC,YAA/D,C,CACA;AACA;;;AAEA,OAAO,UAAUC,QAAV,GAAmC;AACtC,QAAMvB,SAAS,CAACQ,iBAAD,EAAoB,WAAWG,MAAX,EAAuD;AACtF;AACA,UAAMW,YAAuB,GAAG,MAAMpB,MAAM,CAACiB,eAAD,CAA5C;AACA,UAAMK,OAAO,GAAGb,MAAM,CAACE,OAAvB;AAEA,UAAMY,MAAM,GAAG,CAAC,GAAGH,YAAJ,EAAkBE,OAAlB,CAAf;AACAE,IAAAA,YAAY,CAACC,OAAb,CAAqB,cAArB,EAAqCC,IAAI,CAACC,SAAL,CAAeJ,MAAf,CAArC,EANsF,CAQtF;;AACA,UAAMxB,GAAG,CAACM,mBAAmB,CAACkB,MAAD,CAApB,CAAT;AACH,GAVc,CAAf;AAWH;AAED,OAAO,UAAUK,UAAV,GAAqC;AACxC,QAAM9B,SAAS,CAACS,mBAAD,EAAsB,WAAWE,MAAX,EAAyD;AAC1F;AACA,UAAMW,YAAuB,GAAG,MAAMpB,MAAM,CAACiB,eAAD,CAA5C;AACA,UAAMY,WAAW,GAAGpB,MAAM,CAACE,OAA3B;AAEA,UAAMmB,YAAY,GAAGV,YAAY,CAACW,MAAb,CAAqBT,OAAD,IAAsBA,OAAO,CAACZ,IAAR,KAAiBmB,WAA3D,CAArB;AACAL,IAAAA,YAAY,CAACC,OAAb,CAAqB,cAArB,EAAqCC,IAAI,CAACC,SAAL,CAAeG,YAAf,CAArC,EAN0F,CAQ1F;;AACA,UAAM/B,GAAG,CAACM,mBAAmB,CAACyB,YAAD,CAApB,CAAT;AACH,GAVc,CAAf;AAWH;AAED,OACA,UAAUE,QAAV,GAAqB;AACjB;AACA,QAAM9B,GAAG,CAAC,CAACD,IAAI,CAACO,UAAD,CAAL,EAAmBP,IAAI,CAACoB,QAAD,CAAvB,EAAmCpB,IAAI,CAAC2B,UAAD,CAAvC,CAAD,CAAT;AACH;AAED,eAAeI,QAAf","sourcesContent":["// Put effect similar to dispatch in thunk => trigger another action to send data to reducer\nimport { takeEvery, put, select, fork, all } from 'redux-saga/effects';\nimport { SagaIterator } from '@redux-saga/core';\n// Effects like takeEvery, takeLatest: define when to run the saga (which action type will trigger the saga)\n// Saga have to be triggered. thunk can be called straight away\n\nimport { getCountrySuccess, GET_COUNTRY_SAGA, getCountrySaga, reactCountrySuccess, LIKE_COUNTRY_SAGA, UNLIKE_COUNTRY_SAGA, likeCountrySaga, unlikeCountrySaga } from '../actions';\nimport { Store } from '../store';\nimport { Country } from '../../types/types';\n\nexport function* getCountry(): SagaIterator {\n    yield takeEvery(GET_COUNTRY_SAGA, function* (action: ReturnType<typeof getCountrySaga>) {\n        const name = action.payload;\n        const url = `https://restcountries.eu/rest/v2/${name ? `name/${name}?fullText=true` : \"all\"}`;\n\n        //@ts-ignore\n        const response = yield fetch(url);\n        //@ts-ignore\n        const data = yield response.json();\n        yield put(getCountrySuccess(data));\n    })\n}\n\n// Put effect similar to dispatch in thunk => trigger another action to send data to reducer\n\nconst getFavCountries = (store: Store) => store.countryReducer.favCountries;\n// Effects like takeEvery, takeLatest: define when to run the saga (which action type will trigger the saga)\n// Saga have to be triggered. thunk can be called straight away\n\nexport function* likeSaga(): SagaIterator {\n    yield takeEvery(LIKE_COUNTRY_SAGA, function* (action: ReturnType<typeof likeCountrySaga>) {\n        //@ts-ignore\n        const favCountries: Country[] = yield select(getFavCountries);\n        const country = action.payload;\n\n        const newFav = [...favCountries, country];\n        localStorage.setItem(\"favCountries\", JSON.stringify(newFav));\n\n        //@ts-ignore\n        yield put(reactCountrySuccess(newFav));\n    })\n}\n\nexport function* unlikeSaga(): SagaIterator {\n    yield takeEvery(UNLIKE_COUNTRY_SAGA, function* (action: ReturnType<typeof unlikeCountrySaga>) {\n        //@ts-ignore\n        const favCountries: Country[] = yield select(getFavCountries);\n        const countryName = action.payload;\n\n        const remainingFav = favCountries.filter((country: Country) => country.name !== countryName);\n        localStorage.setItem(\"favCountries\", JSON.stringify(remainingFav));\n\n        //@ts-ignore\n        yield put(reactCountrySuccess(remainingFav));\n    })\n}\n\nexport\nfunction* rootSaga() {\n    //@ts-ignore\n    yield all([fork(getCountry), fork(likeSaga), fork(unlikeSaga)])\n}\n\nexport default rootSaga;\n"]},"metadata":{},"sourceType":"module"}